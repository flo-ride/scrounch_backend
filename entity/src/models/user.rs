//! Defines the `User` entity, representing a user in the database schema.
//!
//! This entity is managed by SeaORM and includes fields that map to columns
//! in the `user` table. It also defines behavior for the `User` entity,
//! such as pre-save checks for banning status.
//!
//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::Currency;
use sea_orm::{entity::prelude::*, ActiveValue::Set};
use serde::{Deserialize, Serialize};

/// Represents the `user` entity in the database, encapsulating essential
/// user information such as account status, balance, and timestamps.
#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    proc::DeriveToFilterQuery,
)]
#[sea_orm(table_name = "user")]
pub struct Model {
    /// Unique identifier for the user. Primary key, non-auto-incrementing.
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,

    /// Optional email address associated with the user.
    pub email: Option<String>,

    /// Optional display name of the user.
    pub name: Option<String>,

    /// Optional unique username for the user.
    pub username: Option<String>,

    /// User's current balance, stored as a decimal with up to 10 digits
    /// and 2 decimal places.
    #[sea_orm(column_type = "Decimal(Some((10, 2)))", filter_plus_order)]
    pub balance: Decimal,

    /// Currency type of the user's balance.
    #[sea_orm(filter_override = "crate::request::r#enum::CurrencyRequest")]
    pub balance_currency: Currency,

    /// Indicates if the user has administrative privileges.
    #[sea_orm(filter_single)]
    pub is_admin: bool,

    /// Indicates if the user is banned from the system.
    #[sea_orm(filter_single)]
    pub is_banned: bool,

    /// Timestamp when the user account was created.
    #[sea_orm(filter_override = "chrono::DateTime<chrono::Utc>", filter_plus_order)]
    pub created_at: DateTimeWithTimeZone,

    /// Timestamp of the user's last access to the system.
    #[sea_orm(filter_override = "chrono::DateTime<chrono::Utc>", filter_plus_order)]
    pub last_access_at: DateTimeWithTimeZone,
}

/// Enum defining the relationships associated with the `User` entity.
///
/// This enum is currently empty but can be extended to define relationships with
/// other entities, such as orders or profiles.
#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

/// Custom behavior for the `User` ActiveModel.
///
/// This implementation includes a `before_save` method to automatically
/// remove administrative privileges if a user is marked as banned.
impl ActiveModelBehavior for ActiveModel {
    /// Executes actions before saving the user entity.
    ///
    /// If a user is marked as banned (`is_banned` is `true`), their admin privileges
    /// (`is_admin`) are automatically revoked.
    fn before_save<'life0, 'async_trait, C>(
        mut self,
        _db: &'life0 C,
        _insert: bool,
    ) -> core::pin::Pin<
        Box<
            dyn core::future::Future<Output = Result<Self, DbErr>>
                + core::marker::Send
                + 'async_trait,
        >,
    >
    where
        C: ConnectionTrait,
        C: 'async_trait,
        'life0: 'async_trait,
        Self: core::marker::Send + 'async_trait,
    {
        Box::pin(async move {
            if let Set(true) = self.is_banned {
                self.is_admin = Set(false)
            }
            Ok(self)
        })
    }
}
